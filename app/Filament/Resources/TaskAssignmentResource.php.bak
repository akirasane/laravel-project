<?php

namespace App\Filament\Resources;

use App\Filament\Resources\TaskAssignmentResource\Pages;
use App\Models\TaskAssignment;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class TaskAssignmentResource extends Resource
{
    protected static ?string $model = TaskAssignment::class;

    protected static ?string $navigationIcon = 'heroicon-o-clipboard-document-list';

    // protected static ?string $navigationGroup = 'Workflow Management';

    protected static ?int $navigationSort = 2;

    protected static ?string $navigationLabel = 'Task Assignments';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Task Information')
                    ->schema([
                        Forms\Components\Select::make('order_id')
                            ->relationship('order', 'platform_order_id')
                            ->required()
                            ->searchable()
                            ->preload(),
                        
                        Forms\Components\Select::make('workflow_step_id')
                            ->relationship('workflowStep', 'name')
                            ->required()
                            ->searchable()
                            ->preload(),
                        
                        Forms\Components\Select::make('assigned_to')
                            ->relationship('assignedUser', 'name')
                            ->searchable()
                            ->preload(),
                        
                        Forms\Components\Select::make('status')
                            ->required()
                            ->options([
                                'pending' => 'Pending',
                                'in_progress' => 'In Progress',
                                'completed' => 'Completed',
                                'cancelled' => 'Cancelled',
                                'on_hold' => 'On Hold',
                            ])
                            ->default('pending'),
                    ])
                    ->columns(2),

                Forms\Components\Section::make('Task Details')
                    ->schema([
                        Forms\Components\DateTimePicker::make('assigned_at')
                            ->default(now()),
                        
                        Forms\Components\DateTimePicker::make('started_at'),
                        
                        Forms\Components\DateTimePicker::make('completed_at'),
                        
                        Forms\Components\Textarea::make('notes')
                            ->maxLength(1000)
                            ->rows(3),
                    ])
                    ->columns(2),

                Forms\Components\Section::make('Task Data')
                    ->schema([
                        Forms\Components\KeyValue::make('task_data')
                            ->keyLabel('Key')
                            ->valueLabel('Value')
                            ->addActionLabel('Add Data'),
                    ]),
            ]);
    }    publ
ic static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('order.platform_order_id')
                    ->label('Order ID')
                    ->searchable()
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('workflowStep.name')
                    ->label('Step')
                    ->searchable()
                    ->sortable(),
                
                Tables\Columns\BadgeColumn::make('workflowStep.step_type')
                    ->label('Type')
                    ->colors([
                        'primary' => 'manual',
                        'success' => 'automatic',
                        'warning' => 'approval',
                        'info' => 'notification',
                        'danger' => 'billing',
                        'secondary' => 'packing',
                        'gray' => 'return',
                    ]),
                
                Tables\Columns\TextColumn::make('assignedUser.name')
                    ->label('Assigned To')
                    ->placeholder('Unassigned'),
                
                Tables\Columns\BadgeColumn::make('status')
                    ->colors([
                        'warning' => 'pending',
                        'primary' => 'in_progress',
                        'success' => 'completed',
                        'danger' => 'cancelled',
                        'gray' => 'on_hold',
                    ]),
                
                Tables\Columns\TextColumn::make('assigned_at')
                    ->dateTime()
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('completed_at')
                    ->dateTime()
                    ->sortable()
                    ->placeholder('Not completed'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->options([
                        'pending' => 'Pending',
                        'in_progress' => 'In Progress',
                        'completed' => 'Completed',
                        'cancelled' => 'Cancelled',
                        'on_hold' => 'On Hold',
                    ]),
                
                Tables\Filters\SelectFilter::make('assigned_to')
                    ->relationship('assignedUser', 'name')
                    ->searchable()
                    ->preload(),
                
                Tables\Filters\SelectFilter::make('workflowStep.step_type')
                    ->label('Step Type')
                    ->options([
                        'manual' => 'Manual Task',
                        'automatic' => 'Automatic Action',
                        'approval' => 'Approval Required',
                        'notification' => 'Send Notification',
                        'billing' => 'Billing Process',
                        'packing' => 'Packing Process',
                        'return' => 'Return Process',
                    ]),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\Action::make('start_task')
                    ->label('Start')
                    ->icon('heroicon-o-play')
                    ->color('success')
                    ->visible(fn (TaskAssignment $record) => $record->status === 'pending')
                    ->action(function (TaskAssignment $record) {
                        $record->update([
                            'status' => 'in_progress',
                            'started_at' => now(),
                        ]);
                    }),
                
                Tables\Actions\Action::make('complete_task')
                    ->label('Complete')
                    ->icon('heroicon-o-check')
                    ->color('success')
                    ->visible(fn (TaskAssignment $record) => $record->status === 'in_progress')
                    ->form([
                        Forms\Components\Textarea::make('completion_notes')
                            ->label('Completion Notes')
                            ->required(),
                    ])
                    ->action(function (TaskAssignment $record, array $data) {
                        $record->update([
                            'status' => 'completed',
                            'completed_at' => now(),
                            'notes' => $data['completion_notes'],
                        ]);
                    }),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('assigned_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTaskAssignments::route('/'),
            'create' => Pages\CreateTaskAssignment::route('/create'),
            'view' => Pages\ViewTaskAssignment::route('/{record}'),
            'edit' => Pages\EditTaskAssignment::route('/{record}/edit'),
        ];
    }
}