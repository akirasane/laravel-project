<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ProcessFlowResource\Pages;
use App\Models\ProcessFlow;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class ProcessFlowResource extends Resource
{
    protected static ?string $model = ProcessFlow::class;

    protected static ?string $navigationIcon = 'heroicon-o-cog-6-tooth';

    // protected static ?string $navigationGroup = 'Workflow Management';

    protected static ?int $navigationSort = 1;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Basic Information')
                    ->schema([
                        Forms\Components\TextInput::make('name')
                            ->required()
                            ->maxLength(255)
                            ->unique(ignoreRecord: true),
                        
                        Forms\Components\Textarea::make('description')
                            ->maxLength(1000)
                            ->rows(3),
                        
                        Forms\Components\Toggle::make('is_active')
                            ->required()
                            ->default(true),
                    ])
                    ->columns(2),

                Forms\Components\Section::make('Workflow Conditions')
                    ->schema([
                        Forms\Components\Builder::make('conditions')
                            ->blocks([
                                Forms\Components\Builder\Block::make('condition')
                                    ->schema([
                                        Forms\Components\Select::make('field')
                                            ->options([
                                                'platform_type' => 'Platform Type',
                                                'total_amount' => 'Total Amount',
                                                'currency' => 'Currency',
                                                'status' => 'Order Status',
                                                'customer_email' => 'Customer Email',
                                                'order_items_count' => 'Number of Items',
                                            ])
                                            ->required(),
                                        
                                        Forms\Components\Select::make('operator')
                                            ->options([
                                                '=' => 'Equals',
                                                '!=' => 'Not equals',
                                                '>' => 'Greater than',
                                                '<' => 'Less than',
                                                '>=' => 'Greater than or equal',
                                                '<=' => 'Less than or equal',
                                                'in' => 'In list',
                                                'contains' => 'Contains',
                                            ])
                                            ->required(),
                                        
                                        Forms\Components\TextInput::make('value')
                                            ->required(),
                                    ])
                                    ->columns(3),
                            ])
                            ->collapsible()
                            ->cloneable()
                            ->addActionLabel('Add Condition'),
                    ]),
            ]);
    }   
 public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->searchable()
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('description')
                    ->limit(50)
                    ->tooltip(function (Tables\Columns\TextColumn $column): ?string {
                        $state = $column->getState();
                        return strlen($state) > 50 ? $state : null;
                    }),
                
                Tables\Columns\IconColumn::make('is_active')
                    ->boolean()
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('workflowSteps_count')
                    ->counts('workflowSteps')
                    ->label('Steps')
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('creator.name')
                    ->label('Created By')
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\TernaryFilter::make('is_active')
                    ->label('Active Status'),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\Action::make('manage_steps')
                    ->label('Manage Steps')
                    ->icon('heroicon-o-list-bullet')
                    ->url(fn (ProcessFlow $record): string => ProcessFlowResource::getUrl('steps', ['record' => $record])),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListProcessFlows::route('/'),
            'create' => Pages\CreateProcessFlow::route('/create'),
            'view' => Pages\ViewProcessFlow::route('/{record}'),
            'edit' => Pages\EditProcessFlow::route('/{record}/edit'),
            'steps' => Pages\ManageWorkflowSteps::route('/{record}/steps'),
        ];
    }
}